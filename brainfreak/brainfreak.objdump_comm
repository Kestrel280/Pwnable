
brainfreak:     file format elf32-i386


Disassembly of section .init:

0804840c <_init>:
 804840c:	53                   	push   ebx
 804840d:	83 ec 08             	sub    esp,0x8
 8048410:	e8 fb 00 00 00       	call   8048510 <__x86.get_pc_thunk.bx>
 8048415:	81 c3 eb 1b 00 00    	add    ebx,0x1beb
 804841b:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
 8048421:	85 c0                	test   eax,eax
 8048423:	74 05                	je     804842a <_init+0x1e>
 8048425:	e8 56 00 00 00       	call   8048480 <__gmon_start__@plt>
 804842a:	83 c4 08             	add    esp,0x8
 804842d:	5b                   	pop    ebx
 804842e:	c3                   	ret

Disassembly of section .plt:

08048430 <.plt>:
 8048430:	ff 35 04 a0 04 08    	push   DWORD PTR ds:0x804a004
 8048436:	ff 25 08 a0 04 08    	jmp    DWORD PTR ds:0x804a008
 804843c:	00 00                	add    BYTE PTR [eax],al
	...

08048440 <getchar@plt>:
 8048440:	ff 25 0c a0 04 08    	jmp    DWORD PTR ds:0x804a00c
 8048446:	68 00 00 00 00       	push   0x0
 804844b:	e9 e0 ff ff ff       	jmp    8048430 <.plt>

08048450 <fgets@plt>:
 8048450:	ff 25 10 a0 04 08    	jmp    DWORD PTR ds:0x804a010
 8048456:	68 08 00 00 00       	push   0x8
 804845b:	e9 d0 ff ff ff       	jmp    8048430 <.plt>

08048460 <__stack_chk_fail@plt>:
 8048460:	ff 25 14 a0 04 08    	jmp    DWORD PTR ds:0x804a014
 8048466:	68 10 00 00 00       	push   0x10
 804846b:	e9 c0 ff ff ff       	jmp    8048430 <.plt>

08048470 <puts@plt>:
 8048470:	ff 25 18 a0 04 08    	jmp    DWORD PTR ds:0x804a018
 8048476:	68 18 00 00 00       	push   0x18
 804847b:	e9 b0 ff ff ff       	jmp    8048430 <.plt>

08048480 <__gmon_start__@plt>:
 8048480:	ff 25 1c a0 04 08    	jmp    DWORD PTR ds:0x804a01c
 8048486:	68 20 00 00 00       	push   0x20
 804848b:	e9 a0 ff ff ff       	jmp    8048430 <.plt>

08048490 <strlen@plt>:
 8048490:	ff 25 20 a0 04 08    	jmp    DWORD PTR ds:0x804a020
 8048496:	68 28 00 00 00       	push   0x28
 804849b:	e9 90 ff ff ff       	jmp    8048430 <.plt>

080484a0 <__libc_start_main@plt>:
 80484a0:	ff 25 24 a0 04 08    	jmp    DWORD PTR ds:0x804a024
 80484a6:	68 30 00 00 00       	push   0x30
 80484ab:	e9 80 ff ff ff       	jmp    8048430 <.plt>

080484b0 <setvbuf@plt>:
 80484b0:	ff 25 28 a0 04 08    	jmp    DWORD PTR ds:0x804a028
 80484b6:	68 38 00 00 00       	push   0x38
 80484bb:	e9 70 ff ff ff       	jmp    8048430 <.plt>

080484c0 <memset@plt>:
 80484c0:	ff 25 2c a0 04 08    	jmp    DWORD PTR ds:0x804a02c
 80484c6:	68 40 00 00 00       	push   0x40
 80484cb:	e9 60 ff ff ff       	jmp    8048430 <.plt>

080484d0 <putchar@plt>:
 80484d0:	ff 25 30 a0 04 08    	jmp    DWORD PTR ds:0x804a030
 80484d6:	68 48 00 00 00       	push   0x48
 80484db:	e9 50 ff ff ff       	jmp    8048430 <.plt>

Disassembly of section .text:

080484e0 <_start>:
 80484e0:	31 ed                	xor    ebp,ebp
 80484e2:	5e                   	pop    esi
 80484e3:	89 e1                	mov    ecx,esp
 80484e5:	83 e4 f0             	and    esp,0xfffffff0
 80484e8:	50                   	push   eax
 80484e9:	54                   	push   esp
 80484ea:	52                   	push   edx
 80484eb:	68 10 88 04 08       	push   0x8048810
 80484f0:	68 a0 87 04 08       	push   0x80487a0
 80484f5:	51                   	push   ecx
 80484f6:	56                   	push   esi
 80484f7:	68 71 86 04 08       	push   0x8048671
 80484fc:	e8 9f ff ff ff       	call   80484a0 <__libc_start_main@plt>
 8048501:	f4                   	hlt
 8048502:	66 90                	xchg   ax,ax
 8048504:	66 90                	xchg   ax,ax
 8048506:	66 90                	xchg   ax,ax
 8048508:	66 90                	xchg   ax,ax
 804850a:	66 90                	xchg   ax,ax
 804850c:	66 90                	xchg   ax,ax
 804850e:	66 90                	xchg   ax,ax

08048510 <__x86.get_pc_thunk.bx>:
 8048510:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
 8048513:	c3                   	ret
 8048514:	66 90                	xchg   ax,ax
 8048516:	66 90                	xchg   ax,ax
 8048518:	66 90                	xchg   ax,ax
 804851a:	66 90                	xchg   ax,ax
 804851c:	66 90                	xchg   ax,ax
 804851e:	66 90                	xchg   ax,ax

08048520 <deregister_tm_clones>:
 8048520:	b8 3f a0 04 08       	mov    eax,0x804a03f
 8048525:	2d 3c a0 04 08       	sub    eax,0x804a03c
 804852a:	83 f8 06             	cmp    eax,0x6
 804852d:	77 02                	ja     8048531 <deregister_tm_clones+0x11>
 804852f:	f3 c3                	repz ret
 8048531:	b8 00 00 00 00       	mov    eax,0x0
 8048536:	85 c0                	test   eax,eax
 8048538:	74 f5                	je     804852f <deregister_tm_clones+0xf>
 804853a:	55                   	push   ebp
 804853b:	89 e5                	mov    ebp,esp
 804853d:	83 ec 18             	sub    esp,0x18
 8048540:	c7 04 24 3c a0 04 08 	mov    DWORD PTR [esp],0x804a03c
 8048547:	ff d0                	call   eax
 8048549:	c9                   	leave
 804854a:	c3                   	ret
 804854b:	90                   	nop
 804854c:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]

08048550 <register_tm_clones>:
 8048550:	b8 3c a0 04 08       	mov    eax,0x804a03c
 8048555:	2d 3c a0 04 08       	sub    eax,0x804a03c
 804855a:	c1 f8 02             	sar    eax,0x2
 804855d:	89 c2                	mov    edx,eax
 804855f:	c1 ea 1f             	shr    edx,0x1f
 8048562:	01 d0                	add    eax,edx
 8048564:	d1 f8                	sar    eax,1
 8048566:	75 02                	jne    804856a <register_tm_clones+0x1a>
 8048568:	f3 c3                	repz ret
 804856a:	ba 00 00 00 00       	mov    edx,0x0
 804856f:	85 d2                	test   edx,edx
 8048571:	74 f5                	je     8048568 <register_tm_clones+0x18>
 8048573:	55                   	push   ebp
 8048574:	89 e5                	mov    ebp,esp
 8048576:	83 ec 18             	sub    esp,0x18
 8048579:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 804857d:	c7 04 24 3c a0 04 08 	mov    DWORD PTR [esp],0x804a03c
 8048584:	ff d2                	call   edx
 8048586:	c9                   	leave
 8048587:	c3                   	ret
 8048588:	90                   	nop
 8048589:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]

08048590 <__do_global_dtors_aux>:
 8048590:	80 3d 64 a0 04 08 00 	cmp    BYTE PTR ds:0x804a064,0x0
 8048597:	75 13                	jne    80485ac <__do_global_dtors_aux+0x1c>
 8048599:	55                   	push   ebp
 804859a:	89 e5                	mov    ebp,esp
 804859c:	83 ec 08             	sub    esp,0x8
 804859f:	e8 7c ff ff ff       	call   8048520 <deregister_tm_clones>
 80485a4:	c6 05 64 a0 04 08 01 	mov    BYTE PTR ds:0x804a064,0x1
 80485ab:	c9                   	leave
 80485ac:	f3 c3                	repz ret
 80485ae:	66 90                	xchg   ax,ax

080485b0 <frame_dummy>:
 80485b0:	a1 10 9f 04 08       	mov    eax,ds:0x8049f10
 80485b5:	85 c0                	test   eax,eax
 80485b7:	74 1e                	je     80485d7 <frame_dummy+0x27>
 80485b9:	b8 00 00 00 00       	mov    eax,0x0
 80485be:	85 c0                	test   eax,eax
 80485c0:	74 15                	je     80485d7 <frame_dummy+0x27>
 80485c2:	55                   	push   ebp
 80485c3:	89 e5                	mov    ebp,esp
 80485c5:	83 ec 18             	sub    esp,0x18
 80485c8:	c7 04 24 10 9f 04 08 	mov    DWORD PTR [esp],0x8049f10
 80485cf:	ff d0                	call   eax
 80485d1:	c9                   	leave
 80485d2:	e9 79 ff ff ff       	jmp    8048550 <register_tm_clones>
 80485d7:	e9 74 ff ff ff       	jmp    8048550 <register_tm_clones>

080485dc <do_brainfuck>:                                                        ; ebp+0x08 = argchar
 80485dc:	55                   	push   ebp                                  ; ebp-0x0c = locchar
 80485dd:	89 e5                	mov    ebp,esp                              ; 0x0804a080 = tape i
 80485df:	53                   	push   ebx                                  ; 0x0804a0a0 = tape start
 80485e0:	83 ec 24             	sub    esp,0x24                             ; 36 bytes
 80485e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]              ; move argchar into locchar
 80485e6:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al                ; ...
 80485e9:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]               ; sign-extend locchar to fill eax... ascii should sign-extend all 0's, but we could pass something to extend 1's?
 80485ed:	83 e8 2b             	sub    eax,0x2b                             ; eax -= 43
 80485f0:	83 f8 30             	cmp    eax,0x30                             ; if eax >= 48 -> if char >= [
 80485f3:	77 76                	ja     804866b <do_brainfuck+0x8f>          ;   return
 80485f5:	8b 04 85 48 88 04 08 	mov    eax,DWORD PTR [eax*4+0x8048848]      ; switch statement. ptrs to jump are at 0x08048848 (0x848 in hexdump)
 80485fc:	ff e0                	jmp    eax                                  ; 
 80485fe:	a1 80 a0 04 08       	mov    eax,ds:0x804a080                     ; case '>':
 8048603:	83 c0 01             	add    eax,0x1                              ;   i -= 1
 8048606:	a3 80 a0 04 08       	mov    ds:0x804a080,eax                     ;   
 804860b:	eb 5e                	jmp    804866b <do_brainfuck+0x8f>          ;   
 804860d:	a1 80 a0 04 08       	mov    eax,ds:0x804a080                     ; case '<':
 8048612:	83 e8 01             	sub    eax,0x1                              ;   i += 1
 8048615:	a3 80 a0 04 08       	mov    ds:0x804a080,eax                     ;   
 804861a:	eb 4f                	jmp    804866b <do_brainfuck+0x8f>          ;   
 804861c:	a1 80 a0 04 08       	mov    eax,ds:0x804a080                     ; case '+':
 8048621:	0f b6 10             	movzx  edx,BYTE PTR [eax]                   ;   tape[i] += 1
 8048624:	83 c2 01             	add    edx,0x1                              ;   
 8048627:	88 10                	mov    BYTE PTR [eax],dl                    ;   
 8048629:	eb 40                	jmp    804866b <do_brainfuck+0x8f>          ;   
 804862b:	a1 80 a0 04 08       	mov    eax,ds:0x804a080                     ; case '-':
 8048630:	0f b6 10             	movzx  edx,BYTE PTR [eax]                   ;   tape[i] -= 1
 8048633:	83 ea 01             	sub    edx,0x1                              ;   
 8048636:	88 10                	mov    BYTE PTR [eax],dl                    ;   
 8048638:	eb 31                	jmp    804866b <do_brainfuck+0x8f>          ;   
 804863a:	a1 80 a0 04 08       	mov    eax,ds:0x804a080                     ; case '.':
 804863f:	0f b6 00             	movzx  eax,BYTE PTR [eax]                   ;   putchar
 8048642:	0f be c0             	movsx  eax,al                               ;   
 8048645:	89 04 24             	mov    DWORD PTR [esp],eax                  ;   
 8048648:	e8 83 fe ff ff       	call   80484d0 <putchar@plt>                ;   
 804864d:	eb 1c                	jmp    804866b <do_brainfuck+0x8f>          ;   
 804864f:	8b 1d 80 a0 04 08    	mov    ebx,DWORD PTR ds:0x804a080           ; case ',':
 8048655:	e8 e6 fd ff ff       	call   8048440 <getchar@plt>                ;   getchar, store into tape[i]
 804865a:	88 03                	mov    BYTE PTR [ebx],al                    ;   
 804865c:	eb 0d                	jmp    804866b <do_brainfuck+0x8f>          ;   
 804865e:	c7 04 24 30 88 04 08 	mov    DWORD PTR [esp],0x8048830            ; case '[':
 8048665:	e8 06 fe ff ff       	call   8048470 <puts@plt>                   ;   print "[ and ] not supported"
 804866a:	90                   	nop                                         ;   
 804866b:	83 c4 24             	add    esp,0x24                             ; case '/':
 804866e:	5b                   	pop    ebx                                  ;   
 804866f:	5d                   	pop    ebp                                  ;   
 8048670:	c3                   	ret

08048671 <main>:                                                                ;
 8048671:	55                   	push   ebp                                  ;
 8048672:	89 e5                	mov    ebp,esp                              ;
 8048674:	53                   	push   ebx                                  ;
 8048675:	83 e4 f0             	and    esp,0xfffffff0                       ;
 8048678:	81 ec 30 04 00 00    	sub    esp,0x430                            ; 1072 bytes
 804867e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]              ; tape from esp+0x2c to 0x42c
 8048681:	89 44 24 1c          	mov    DWORD PTR [esp+0x1c],eax             ; stack canary at esp+0x42c
 8048685:	65 a1 14 00 00 00    	mov    eax,gs:0x14                          ; load and store stack canary
 804868b:	89 84 24 2c 04 00 00 	mov    DWORD PTR [esp+0x42c],eax            ; ...
 8048692:	31 c0                	xor    eax,eax                              ; vbuf...
 8048694:	a1 60 a0 04 08       	mov    eax,ds:0x804a060                     ; ...
 8048699:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0              ; ...
 80486a0:	00                                                                  ; ...
 80486a1:	c7 44 24 08 02 00 00 	mov    DWORD PTR [esp+0x8],0x2              ; ...
 80486a8:	00                                                                  ; ...
 80486a9:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0              ; ...
 80486b0:	00                                                                  ; ...
 80486b1:	89 04 24             	mov    DWORD PTR [esp],eax                  ; ...
 80486b4:	e8 f7 fd ff ff       	call   80484b0 <setvbuf@plt>                ; ...
 80486b9:	a1 40 a0 04 08       	mov    eax,ds:0x804a040                     ; ...
 80486be:	c7 44 24 0c 00 00 00 	mov    DWORD PTR [esp+0xc],0x0              ; ...
 80486c5:	00                                                                  ; ...
 80486c6:	c7 44 24 08 01 00 00 	mov    DWORD PTR [esp+0x8],0x1              ; ...
 80486cd:	00                                                                  ; ...
 80486ce:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0              ; ...
 80486d5:	00                                                                  ; ...
 80486d6:	89 04 24             	mov    DWORD PTR [esp],eax                  ; ...
 80486d9:	e8 d2 fd ff ff       	call   80484b0 <setvbuf@plt>                ; ...vbuf
 80486de:	c7 05 80 a0 04 08 a0 	mov    DWORD PTR ds:0x804a080,0x804a0a0     ; init tape = 0x0804a0a0
 80486e5:	a0 04 08                                                            ; ...
 80486e8:	c7 04 24 0c 89 04 08 	mov    DWORD PTR [esp],0x804890c            ; puts "welcome"
 80486ef:	e8 7c fd ff ff       	call   8048470 <puts@plt>                   ; ...puts
 80486f4:	c7 04 24 34 89 04 08 	mov    DWORD PTR [esp],0x8048934            ; puts "type some instructions"
 80486fb:	e8 70 fd ff ff       	call   8048470 <puts@plt>                   ; ...puts
 8048700:	c7 44 24 08 00 04 00 	mov    DWORD PTR [esp+0x8],0x400            ; memset the input buffer to all nulls
 8048707:	00                                                                  ; ...
 8048708:	c7 44 24 04 00 00 00 	mov    DWORD PTR [esp+0x4],0x0              ; ...
 804870f:	00                                                                  ; ...
 8048710:	8d 44 24 2c          	lea    eax,[esp+0x2c]                       ; ...
 8048714:	89 04 24             	mov    DWORD PTR [esp],eax                  ; ...
 8048717:	e8 a4 fd ff ff       	call   80484c0 <memset@plt>                 ; ...memset
 804871c:	a1 40 a0 04 08       	mov    eax,ds:0x804a040                     ; fgets(buf, 1024, STDIN)
 8048721:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax              ; ...
 8048725:	c7 44 24 04 00 04 00 	mov    DWORD PTR [esp+0x4],0x400            ; ...
 804872c:	00                                                                  ; ...
 804872d:	8d 44 24 2c          	lea    eax,[esp+0x2c]                       ; ...
 8048731:	89 04 24             	mov    DWORD PTR [esp],eax                  ; ...
 8048734:	e8 17 fd ff ff       	call   8048450 <fgets@plt>                  ; ...fgets
 8048739:	c7 44 24 28 00 00 00 	mov    DWORD PTR [esp+0x28],0x0             ; for (j = 0; j < strlen(buf); j++) {
 8048740:	00                                                                  ; ... esp+0x28 = &j
 8048741:	eb 1d                	jmp    8048760 <main+0xef>                  ; ...
 8048743:	8d 54 24 2c          	lea    edx,[esp+0x2c]                       ; do_brainfuck(*(buf+j))
 8048747:	8b 44 24 28          	mov    eax,DWORD PTR [esp+0x28]             ; ...
 804874b:	01 d0                	add    eax,edx                              ; ...
 804874d:	0f b6 00             	movzx  eax,BYTE PTR [eax]                   ; ...
 8048750:	0f be c0             	movsx  eax,al                               ; ...
 8048753:	89 04 24             	mov    DWORD PTR [esp],eax                  ; ...
 8048756:	e8 81 fe ff ff       	call   80485dc <do_brainfuck>               ; ...
 804875b:	83 44 24 28 01       	add    DWORD PTR [esp+0x28],0x1             ; j++
 8048760:	8b 5c 24 28          	mov    ebx,DWORD PTR [esp+0x28]             ; ...strlen
 8048764:	8d 44 24 2c          	lea    eax,[esp+0x2c]                       ; ...
 8048768:	89 04 24             	mov    DWORD PTR [esp],eax                  ; ...
 804876b:	e8 20 fd ff ff       	call   8048490 <strlen@plt>                 ; ...strlen
 8048770:	39 c3                	cmp    ebx,eax                              ; check for loop done
 8048772:	72 cf                	jb     8048743 <main+0xd2>                  ; } end for
 8048774:	b8 00 00 00 00       	mov    eax,0x0                              ;
 8048779:	8b 94 24 2c 04 00 00 	mov    edx,DWORD PTR [esp+0x42c]            ; check stack canary...
 8048780:	65 33 15 14 00 00 00 	xor    edx,DWORD PTR gs:0x14                ; ...
 8048787:	74 05                	je     804878e <main+0x11d>                 ; ...
 8048789:	e8 d2 fc ff ff       	call   8048460 <__stack_chk_fail@plt>       ; ...
 804878e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]              ;
 8048791:	c9                   	leave                                       ;
 8048792:	c3                   	ret                                         ; ROP here??
 8048793:	66 90                	xchg   ax,ax                                ;
 8048795:	66 90                	xchg   ax,ax                                ;
 8048797:	66 90                	xchg   ax,ax                                ;
 8048799:	66 90                	xchg   ax,ax                                ;
 804879b:	66 90                	xchg   ax,ax                                ;
 804879d:	66 90                	xchg   ax,ax                                ;
 804879f:	90                   	nop                                         ;

080487a0 <__libc_csu_init>:
 80487a0:	55                   	push   ebp
 80487a1:	57                   	push   edi
 80487a2:	31 ff                	xor    edi,edi
 80487a4:	56                   	push   esi
 80487a5:	53                   	push   ebx
 80487a6:	e8 65 fd ff ff       	call   8048510 <__x86.get_pc_thunk.bx>
 80487ab:	81 c3 55 18 00 00    	add    ebx,0x1855
 80487b1:	83 ec 1c             	sub    esp,0x1c
 80487b4:	8b 6c 24 30          	mov    ebp,DWORD PTR [esp+0x30]
 80487b8:	8d b3 0c ff ff ff    	lea    esi,[ebx-0xf4]
 80487be:	e8 49 fc ff ff       	call   804840c <_init>
 80487c3:	8d 83 08 ff ff ff    	lea    eax,[ebx-0xf8]
 80487c9:	29 c6                	sub    esi,eax
 80487cb:	c1 fe 02             	sar    esi,0x2
 80487ce:	85 f6                	test   esi,esi
 80487d0:	74 27                	je     80487f9 <__libc_csu_init+0x59>
 80487d2:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
 80487d8:	8b 44 24 38          	mov    eax,DWORD PTR [esp+0x38]
 80487dc:	89 2c 24             	mov    DWORD PTR [esp],ebp
 80487df:	89 44 24 08          	mov    DWORD PTR [esp+0x8],eax
 80487e3:	8b 44 24 34          	mov    eax,DWORD PTR [esp+0x34]
 80487e7:	89 44 24 04          	mov    DWORD PTR [esp+0x4],eax
 80487eb:	ff 94 bb 08 ff ff ff 	call   DWORD PTR [ebx+edi*4-0xf8]
 80487f2:	83 c7 01             	add    edi,0x1
 80487f5:	39 f7                	cmp    edi,esi
 80487f7:	75 df                	jne    80487d8 <__libc_csu_init+0x38>
 80487f9:	83 c4 1c             	add    esp,0x1c
 80487fc:	5b                   	pop    ebx
 80487fd:	5e                   	pop    esi
 80487fe:	5f                   	pop    edi
 80487ff:	5d                   	pop    ebp
 8048800:	c3                   	ret
 8048801:	eb 0d                	jmp    8048810 <__libc_csu_fini>
 8048803:	90                   	nop
 8048804:	90                   	nop
 8048805:	90                   	nop
 8048806:	90                   	nop
 8048807:	90                   	nop
 8048808:	90                   	nop
 8048809:	90                   	nop
 804880a:	90                   	nop
 804880b:	90                   	nop
 804880c:	90                   	nop
 804880d:	90                   	nop
 804880e:	90                   	nop
 804880f:	90                   	nop

08048810 <__libc_csu_fini>:
 8048810:	f3 c3                	repz ret
 8048812:	66 90                	xchg   ax,ax

Disassembly of section .fini:

08048814 <_fini>:
 8048814:	53                   	push   ebx
 8048815:	83 ec 08             	sub    esp,0x8
 8048818:	e8 f3 fc ff ff       	call   8048510 <__x86.get_pc_thunk.bx>
 804881d:	81 c3 e3 17 00 00    	add    ebx,0x17e3
 8048823:	83 c4 08             	add    esp,0x8
 8048826:	5b                   	pop    ebx
 8048827:	c3                   	ret
